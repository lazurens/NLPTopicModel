length(docs)
docs
docs.documents
docs
docs.Content
docs <-tm_map(docs,content_transformer(tolower))
docs
toSpace <- content_transformer(function(x, pattern) { return (gsub(pattern, ' ', x))})
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords('english'))
docs <- tm_map(docs, stripWhitespace)
writeLines(as.character(docs[[30]]))
writeLines(as.character(docs[[4]]))
writeLines(as.character(docs[[5]]))
writeLines(as.character(docs[[2]]))
writeLines(as.character(docs[[2]]))
writeLines(as.character(docs[[1]]))
writeLines(as.character(docs[[4]]))
docs <- tm_map(docs,stemDocument)
docs <- tm_map(docs, content_transformer(gsub),
pattern = 'organiz', replacement = 'organ')
docs <- tm_map(docs, content_transformer(gsub),
pattern = 'organis', replacement = 'organ')
docs <- tm_map(docs, content_transformer(gsub),
pattern = 'andgovern', replacement = 'govern')
docs <- tm_map(docs, content_transformer(gsub),
pattern = 'inenterpris', replacement = 'enterpris')
docs <- tm_map(docs, content_transformer(gsub),
pattern = 'team-', replacement = 'team')
myStopwords <- c('can', 'say','one','way','use',
'also','howev','tell','will',
'much','need','take','tend','even',
'like','particular','rather','said',
'get','well','make','ask','come','end',
'first','two','help','often','may',
'might','see','someth','thing','point',
'post','look','right','now','think','‘ve ',
'‘re ','anoth','put','set','new','good',
'want','sure','kind','larg','yes,','day','etc',
'quit','sinc','attempt','lack','seen','awar',
'littl','ever','moreov','though','found','abl',
'enough','far','earli','away','achiev','draw',
'last','never','brief','bit','entir','brief',
'great','lot')
docs <- tm_map(docs, removeWords, myStopwords)
writeLines(as.character(docs[[30]]))
writeLines(as.character(docs[[4]]))
dtm <- DocumentTermMatrix(docs)
rownames(dtm) <- filenames
freq <- colSums(as.matrix(dtm))
length(freq)
ord <- order(freq,decreasing=TRUE)
freq[ord]
write.csv(freq[ord],'word_freq.csv')
library(topicmodels)
burnin <- 4000
iter <- 2000
thin <- 500
seed <-list(2003,5,63,100001,765)
nstart <- 5
best <- TRUE
k <- 5
ldaOut <-LDA(dtm,k, method='Gibbs', control=list(nstart=nstart, seed = seed, best=best, burnin = burnin, iter = iter, thin=thin))
dtm
ldaOut <-LDA(dtm,k, method='Gibbs', control=list(nstart=nstart, seed = seed, best=best, burnin = burnin, iter = iter, thin=thin))
raw.sum=apply(dtm,1,FUN=sum) #sum by raw each raw of the table
dtm=dtm[raw.sum!=0,]
ldaOut <-LDA(dtm,k, method='Gibbs', control=list(nstart=nstart, seed = seed, best=best, burnin = burnin, iter = iter, thin=thin))
ldaOut.topics <- as.matrix(topics(ldaOut))
write.csv(ldaOut.topics,file=paste('LDAGibbs',k,'DocsToTopics.csv'))
ldaOut.terms <- as.matrix(terms(ldaOut,6))
write.csv(ldaOut.terms,file=paste('LDAGibbs',k,'TopicsToTerms.csv'))
topicProbabilities <- as.data.frame(ldaOut@gamma)
write.csv(topicProbabilities,file=paste('LDAGibbs',k,'TopicProbabilities.csv'))
topic1ToTopic2 <- lapply(1:nrow(dtm),function(x)
sort(topicProbabilities[x,])[k]/sort(topicProbabilities[x,])[k-1])
topic2ToTopic3 <- lapply(1:nrow(dtm),function(x)
sort(topicProbabilities[x,])[k-1]/sort(topicProbabilities[x,])[k-2])
write.csv(topic1ToTopic2,file=paste('LDAGibbs',k,'Topic1ToTopic2.csv'))
write.csv(topic2ToTopic3,file=paste('LDAGibbs',k,'Topic2ToTopic3.csv'))
install.packages("LDAvis")
library(tidyverse)
library(tidytext)
library(tm)
library(stringr)
library(SnowballC)
library(topicmodels)
posts_tbl
library(LDAvis)
K <- 20
G <- 5000
alpha <- 0.02
eta <- 0.02
ldaOut.topics
library(tidyverse)
library(tidytext)
library(tm)
library(stringr)
library(SnowballC)
library(topicmodels)
library(tm)
setwd('lda/textmining')
filenames <- list.files(getwd(),pattern='*.txt')
files <- lapply(filenames,readLines)
library(tidyverse)
library(tidytext)
library(tm)
library(stringr)
library(SnowballC)
library(topicmodels)
posts_tbl <- readRDS(file = "20170302_TopicsFromTwitter/data/posts.Rds")
posts_tbl <- filter(posts_tbl, nb_actions >= 1)
library(tm)
setwd('tweetmining')
setwd('lda/textmining')
docs <- Corpus(VectorSource(posts_tbl))
writeLines(as.character(docs[[4]]))
docs <-tm_map(docs,content_transformer(tolower))
toSpace <- content_transformer(function(x, pattern) { return (gsub(pattern, ' ', x))})
docs <- tm_map(docs, toSpace, '-')
docs <- tm_map(docs, toSpace, '’')
docs <- tm_map(docs, toSpace, '‘')
docs <- tm_map(docs, toSpace, '•')
docs <- tm_map(docs, toSpace, "”")
docs <- tm_map(docs, toSpace, '“')
docs <- tm_map(docs, removePunctuation)
docs <- tm_map(docs, removeNumbers)
docs <- tm_map(docs, removeWords, stopwords('english'))
docs <- tm_map(docs, stripWhitespace)
writeLines(as.character(docs[[4]]))
docs <- tm_map(docs,stemDocument)
docs <- tm_map(docs, content_transformer(gsub),
pattern = 'organiz', replacement = 'organ')
docs <- tm_map(docs, content_transformer(gsub),
pattern = 'organis', replacement = 'organ')
docs <- tm_map(docs, content_transformer(gsub),
pattern = 'andgovern', replacement = 'govern')
docs <- tm_map(docs, content_transformer(gsub),
pattern = 'inenterpris', replacement = 'enterpris')
docs <- tm_map(docs, content_transformer(gsub),
pattern = 'team-', replacement = 'team')
myStopwords <- c('can', 'say','one','way','use',
'also','howev','tell','will',
'much','need','take','tend','even',
'like','particular','rather','said',
'get','well','make','ask','come','end',
'first','two','help','often','may',
'might','see','someth','thing','point',
'post','look','right','now','think','‘ve ',
'‘re ','anoth','put','set','new','good',
'want','sure','kind','larg','yes,','day','etc',
'quit','sinc','attempt','lack','seen','awar',
'littl','ever','moreov','though','found','abl',
'enough','far','earli','away','achiev','draw',
'last','never','brief','bit','entir','brief',
'great','lot')
docs <- tm_map(docs, removeWords, myStopwords)
writeLines(as.character(docs[[4]]))
dtm <- DocumentTermMatrix(docs)
freq <- colSums(as.matrix(dtm))
length(freq)
ord <- order(freq,decreasing=TRUE)
freq[ord]
write.csv(freq[ord],'word_freq.csv')
library(topicmodels)
#Set parameters for Gibbs sampling
burnin <- 4000
iter <- 2000
thin <- 500
seed <-list(2003,5,63,100001,765)
nstart <- 5
best <- TRUE
#Number of topics
k <- 5
raw.sum=apply(dtm,1,FUN=sum) #sum by raw each raw of the table
dtm=dtm[raw.sum!=0,]
ldaOut <-LDA(dtm,k, method='Gibbs', control=list(nstart=nstart, seed = seed, best=best, burnin = burnin, iter = iter, thin=thin))
library(tidyverse)
library(tidytext)
library(tm)
library(stringr)
library(SnowballC)
library(topicmodels)
setwd('lda/textmining')
filenames <- list.files(getwd(),pattern='*.txt')
library(tidyverse)
library(tidytext)
library(tm)
library(stringr)
library(SnowballC)
library(topicmodels)
library(dplyr)
library(stringi)
if (!file.exists("data-raw/reviews")) {
tmp <- tempfile(fileext = ".tar.gz")
download.file("http://www.cs.cornell.edu/people/pabo/movie-review-data/review_polarity.tar.gz",
tmp, quiet = TRUE)
untar(tmp, exdir = "data-raw/reviews")
unlink(tmp)
}
path <- file.path("data-raw", "reviews", "txt_sentoken")
pos <- list.files(file.path(path, "pos"))
neg <- list.files(file.path(path, "neg"))
pos.files <- file.path(path, "pos", pos)
neg.files <- file.path(path, "neg", neg)
all.files <- c(pos.files, neg.files)
txt <- lapply(all.files, readLines)
nms <- gsub("data-raw/reviews/txt_sentoken", "", all.files)
reviews <- setNames(txt, nms)
reviews <- sapply(reviews, function(x) paste(x, collapse = " "))
save(reviews, file = "data/reviews.rdata", compress = "xz")
library(tm)
stop_words <- stopwords("SMART")
reviews <- gsub("'", "", reviews)  # remove apostrophes
reviews <- gsub("[[:punct:]]", " ", reviews)  # replace punctuation with space
reviews <- gsub("[[:cntrl:]]", " ", reviews)  # replace control characters with space
reviews <- gsub("^[[:space:]]+", "", reviews) # remove whitespace at beginning of documents
reviews <- gsub("[[:space:]]+$", "", reviews) # remove whitespace at end of documents
reviews <- tolower(reviews)  # force to lowercase
doc.list <- strsplit(reviews, "[[:space:]]+")
term.table <- table(unlist(doc.list))
term.table <- sort(term.table, decreasing = TRUE)
del <- names(term.table) %in% stop_words | term.table < 5
term.table <- term.table[!del]
vocab <- names(term.table)
get.terms <- function(x) {
index <- match(x, vocab)
index <- index[!is.na(index)]
rbind(as.integer(index - 1), as.integer(rep(1, length(index))))
}
documents <- lapply(doc.list, get.terms)
D <- length(documents)  # number of documents (2,000)
W <- length(vocab)  # number of terms in the vocab (14,568)
doc.length <- sapply(documents, function(x) sum(x[2, ]))  # number of tokens per document [312, 288, 170, 436, 291, ...]
N <- sum(doc.length)  # total number of tokens in the data (546,827)
term.frequency <- as.integer(term.table)  # frequencies of terms in the corpus [8939, 5544, 2411, 2410, 2143, ...]
K <- 20
G <- 5000
alpha <- 0.02
eta <- 0.02
library(lda)
set.seed(357)
t1 <- Sys.time()
fit <- lda.collapsed.gibbs.sampler(documents = documents, K = K, vocab = vocab,
num.iterations = G, alpha = alpha,
eta = eta, initial = NULL, burnin = 0,
compute.log.likelihood = TRUE)
t2 <- Sys.time()
t2 - t1  # about 21 minutes on laptop
theta <- t(apply(fit$document_sums + alpha, 2, function(x) x/sum(x)))
phi <- t(apply(t(fit$topics) + eta, 2, function(x) x/sum(x)))
MovieReviews <- list(phi = phi,
theta = theta,
doc.length = doc.length,
vocab = vocab,
term.frequency = term.frequency)
library(LDAvis)
json <- createJSON(phi = MovieReviews$phi,
theta = MovieReviews$theta,
doc.length = MovieReviews$doc.length,
vocab = MovieReviews$vocab,
term.frequency = MovieReviews$term.frequency)
serVis(json, out.dir = 'vis', open.browser = TRUE)
library(tidyverse)
library(tidytext)
library(tm)
library(stringr)
library(SnowballC)
library(topicmodels)
library(dplyr)
library(stringi)
if (!file.exists("data-raw/reviews")) {
tmp <- tempfile(fileext = ".tar.gz")
download.file("http://www.cs.cornell.edu/people/pabo/movie-review-data/review_polarity.tar.gz",
tmp, quiet = TRUE)
untar(tmp, exdir = "data-raw/reviews")
unlink(tmp)
}
path <- file.path("data-raw", "reviews", "txt_sentoken")
pos <- list.files(file.path(path, "pos"))
neg <- list.files(file.path(path, "neg"))
pos.files <- file.path(path, "pos", pos)
neg.files <- file.path(path, "neg", neg)
all.files <- c(pos.files, neg.files)
txt <- lapply(all.files, readLines)
nms <- gsub("data-raw/reviews/txt_sentoken", "", all.files)
reviews <- setNames(txt, nms)
reviews <- sapply(reviews, function(x) paste(x, collapse = " "))
save(reviews, file = "data/reviews.rdata", compress = "xz")
library(tm)
stop_words <- stopwords("SMART")
# pre-processing:
reviews <- gsub("'", "", reviews)  # remove apostrophes
reviews <- gsub("[[:punct:]]", " ", reviews)  # replace punctuation with space
reviews <- gsub("[[:cntrl:]]", " ", reviews)  # replace control characters with space
reviews <- gsub("^[[:space:]]+", "", reviews) # remove whitespace at beginning of documents
reviews <- gsub("[[:space:]]+$", "", reviews) # remove whitespace at end of documents
reviews <- tolower(reviews)  # force to lowercase
myStopwords <- c('can', 'say','one','way','use',
'also','howev','tell','will',
'much','need','take','tend','even',
'like','particular','rather','said',
'get','well','make','ask','come','end',
'first','two','help','often','may',
'might','see','someth','thing','point',
'post','look','right','now','think','‘ve ',
'‘re ','anoth','put','set','new','good',
'want','sure','kind','larg','yes,','day','etc',
'quit','sinc','attempt','lack','seen','awar',
'littl','ever','moreov','though','found','abl',
'enough','far','earli','away','achiev','draw',
'last','never','brief','bit','entir','brief',
'great','lot')
reviews <- tm_map(reviews, removeWords, myStopwords)
creviews <- Corpus(reviews)
creviews <- Corpus(VectorSource(reviews))
creviews <- tm_map(creviews, removeWords, myStopwords)
doc.list <- strsplit(creviews, "[[:space:]]+")
doc.list <- tm_map(creviews, stripWhitespace., myStopwords)
doc.list <- tm_map(creviews, stripWhitespace)
term.table <- table(unlist(doc.list))
term.table <- sort(term.table, decreasing = TRUE)
del <- names(term.table) %in% stop_words | term.table < 5
term.table <- term.table[!del]
vocab <- names(term.table)
get.terms <- function(x) {
index <- match(x, vocab)
index <- index[!is.na(index)]
rbind(as.integer(index - 1), as.integer(rep(1, length(index))))
}
documents <- lapply(doc.list, get.terms)
D <- length(documents)  # number of documents (2,000)
W <- length(vocab)  # number of terms in the vocab (14,568)
doc.length <- sapply(documents, function(x) sum(x[2, ]))  # number of tokens per document [312, 288, 170, 436, 291, ...]
N <- sum(doc.length)  # total number of tokens in the data (546,827)
term.frequency <- as.integer(term.table)  # frequencies of terms in the corpus [8939, 5544, 2411, 2410, 2143, ...]
K <- 20
G <- 5000
alpha <- 0.02
eta <- 0.02
library(lda)
set.seed(357)
t1 <- Sys.time()
fit <- lda.collapsed.gibbs.sampler(documents = documents, K = K, vocab = vocab,
num.iterations = G, alpha = alpha,
eta = eta, initial = NULL, burnin = 0,
compute.log.likelihood = TRUE)
library(tidyverse)
library(tidytext)
library(tm)
library(stringr)
library(SnowballC)
library(topicmodels)
library(dplyr)
library(stringi)
if (!file.exists("data-raw/reviews")) {
tmp <- tempfile(fileext = ".tar.gz")
download.file("http://www.cs.cornell.edu/people/pabo/movie-review-data/review_polarity.tar.gz",
tmp, quiet = TRUE)
untar(tmp, exdir = "data-raw/reviews")
unlink(tmp)
}
path <- file.path("data-raw", "reviews", "txt_sentoken")
pos <- list.files(file.path(path, "pos"))
neg <- list.files(file.path(path, "neg"))
pos.files <- file.path(path, "pos", pos)
neg.files <- file.path(path, "neg", neg)
all.files <- c(pos.files, neg.files)
txt <- lapply(all.files, readLines)
nms <- gsub("data-raw/reviews/txt_sentoken", "", all.files)
reviews <- setNames(txt, nms)
reviews <- sapply(reviews, function(x) paste(x, collapse = " "))
save(reviews, file = "data/reviews.rdata", compress = "xz")
#posts_tbl <- readRDS(file = "20170302_TopicsFromTwitter/data/posts.Rds")
# Only keep popular tweets
#posts_tbl <- filter(posts_tbl, nb_actions >= 1)
#reviews <- posts_tbl
# read in some stopwords:
library(tm)
stop_words <- stopwords("SMART")
# pre-processing:
reviews <- gsub("'", "", reviews)  # remove apostrophes
reviews <- gsub("[[:punct:]]", " ", reviews)  # replace punctuation with space
reviews <- gsub("[[:cntrl:]]", " ", reviews)  # replace control characters with space
reviews <- gsub("^[[:space:]]+", "", reviews) # remove whitespace at beginning of documents
reviews <- gsub("[[:space:]]+$", "", reviews) # remove whitespace at end of documents
reviews <- tolower(reviews)  # force to lowercase
myStopwords <- c('can', 'say','one','way','use',
'also','howev','tell','will',
'much','need','take','tend','even',
'like','particular','rather','said',
'get','well','make','ask','come','end',
'first','two','help','often','may',
'might','see','someth','thing','point',
'post','look','right','now','think','‘ve ',
'‘re ','anoth','put','set','new','good',
'want','sure','kind','larg','yes,','day','etc',
'quit','sinc','attempt','lack','seen','awar',
'littl','ever','moreov','though','found','abl',
'enough','far','earli','away','achiev','draw',
'last','never','brief','bit','entir','brief',
'great','lot')
creviews <- Corpus(VectorSource(reviews))
creviews <- tm_map(creviews, removeWords, myStopwords)
doc.list <- tm_map(creviews, stripWhitespace)
term.table <- table(unlist(doc.list))
term.table <- sort(term.table, decreasing = TRUE)
del <- names(term.table) %in% stop_words | term.table < 5
term.table <- term.table[!del]
vocab <- names(term.table)
get.terms <- function(x) {
index <- match(x, vocab)
index <- index[!is.na(index)]
rbind(as.integer(index - 1), as.integer(rep(1, length(index))))
}
documents <- lapply(doc.list, get.terms)
D <- length(documents)  # number of documents (2,000)
W <- length(vocab)  # number of terms in the vocab (14,568)
doc.length <- sapply(documents, function(x) sum(x[2, ]))  # number of tokens per document [312, 288, 170, 436, 291, ...]
N <- sum(doc.length)  # total number of tokens in the data (546,827)
term.frequency <- as.integer(term.table)  # frequencies of terms in the corpus [8939, 5544, 2411, 2410, 2143, ...]
K <- 20
G <- 5000
alpha <- 0.02
eta <- 0.02
library(lda)
set.seed(357)
t1 <- Sys.time()
fit <- lda.collapsed.gibbs.sampler(documents = documents, K = K, vocab = vocab,
num.iterations = G, alpha = alpha,
eta = eta, initial = NULL, burnin = 0,
compute.log.likelihood = TRUE)
warning()
warnings()
library(tidyverse)
library(tidytext)
library(tm)
library(stringr)
library(SnowballC)
library(topicmodels)
library(dplyr)
library(stringi)
if (!file.exists("data-raw/reviews")) {
tmp <- tempfile(fileext = ".tar.gz")
download.file("http://www.cs.cornell.edu/people/pabo/movie-review-data/review_polarity.tar.gz",
tmp, quiet = TRUE)
untar(tmp, exdir = "data-raw/reviews")
unlink(tmp)
}
path <- file.path("data-raw", "reviews", "txt_sentoken")
pos <- list.files(file.path(path, "pos"))
neg <- list.files(file.path(path, "neg"))
pos.files <- file.path(path, "pos", pos)
neg.files <- file.path(path, "neg", neg)
all.files <- c(pos.files, neg.files)
txt <- lapply(all.files, readLines)
nms <- gsub("data-raw/reviews/txt_sentoken", "", all.files)
reviews <- setNames(txt, nms)
reviews <- sapply(reviews, function(x) paste(x, collapse = " "))
save(reviews, file = "data/reviews.rdata", compress = "xz")
#posts_tbl <- readRDS(file = "20170302_TopicsFromTwitter/data/posts.Rds")
# Only keep popular tweets
#posts_tbl <- filter(posts_tbl, nb_actions >= 1)
#reviews <- posts_tbl
# read in some stopwords:
library(tm)
stop_words <- stopwords("SMART")
# pre-processing:
reviews <- gsub("'", "", reviews)  # remove apostrophes
reviews <- gsub("[[:punct:]]", " ", reviews)  # replace punctuation with space
reviews <- gsub("[[:cntrl:]]", " ", reviews)  # replace control characters with space
reviews <- gsub("^[[:space:]]+", "", reviews) # remove whitespace at beginning of documents
reviews <- gsub("[[:space:]]+$", "", reviews) # remove whitespace at end of documents
reviews <- tolower(reviews)  # force to lowercase
# tokenize on space and output as a list:
doc.list <- strsplit(creviews, "[[:space:]]+")
doc.list <- strsplit(reviews, "[[:space:]]+")
# compute the table of terms:
term.table <- table(unlist(doc.list))
term.table <- sort(term.table, decreasing = TRUE)
# remove terms that are stop words or occur fewer than 5 times:
del <- names(term.table) %in% stop_words | term.table < 5
term.table <- term.table[!del]
vocab <- names(term.table)
# now put the documents into the format required by the lda package:
get.terms <- function(x) {
index <- match(x, vocab)
index <- index[!is.na(index)]
rbind(as.integer(index - 1), as.integer(rep(1, length(index))))
}
documents <- lapply(doc.list, get.terms)
######################
# Compute some statistics related to the data set:
D <- length(documents)  # number of documents (2,000)
W <- length(vocab)  # number of terms in the vocab (14,568)
doc.length <- sapply(documents, function(x) sum(x[2, ]))  # number of tokens per document [312, 288, 170, 436, 291, ...]
N <- sum(doc.length)  # total number of tokens in the data (546,827)
term.frequency <- as.integer(term.table)  # frequencies of terms in the corpus [8939, 5544, 2411, 2410, 2143, ...]
# MCMC and model tuning parameters:
K <- 20
G <- 5000
alpha <- 0.02
eta <- 0.02
# Fit the model:
library(lda)
set.seed(357)
t1 <- Sys.time()
fit <- lda.collapsed.gibbs.sampler(documents = documents, K = K, vocab = vocab,
num.iterations = G, alpha = alpha,
eta = eta, initial = NULL, burnin = 0,
compute.log.likelihood = TRUE)
